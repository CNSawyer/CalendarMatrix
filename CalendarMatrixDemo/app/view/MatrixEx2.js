/*
 * File: app/view/MatrixEx2.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CalendarMatrix.view.MatrixEx2', {
    extend: 'Ext.container.Container',
    alias: 'widget.matrixex2',

    requires: [
        'CalendarMatrix.view.MatrixEx2ViewModel',
        'CalendarMatrix.view.MatrixEx2ViewController',
        'Ext.panel.Panel'
    ],

    controller: 'matrixex2',
    viewModel: {
        type: 'matrixex2'
    },
    cls: 'matrix-ex2-cal',
    itemId: 'matrixEx2',
    scrollable: true,
    style: 'background-color: white; margin-left: 5px;',
    layout: 'border',

    items: [
        {
            xtype: 'container',
            region: 'north',
            html: '2x3 Matrix Options Expiration read-only Calendar with legend.  Also Demonstrates the following:<br> - Dates outside of each month hidden. <br> - Multi "random" date selection example',
            style: 'margin: 20px 0; font-size: 18px;'
        },
        {
            xtype: 'container',
            region: 'west',
            itemId: 'westCont',
            maxWidth: 456,
            minHeight: 720,
            width: 456,
            items: [
                {
                    xtype: 'container',
                    cls: 'calendar-matrix-legend',
                    height: 50,
                    itemId: 'calendarMatrixLegend'
                }
            ]
        },
        {
            xtype: 'panel',
            region: 'west',
            reference: 'selectedCont',
            itemId: 'selectedCont',
            margin: '0 0 0 10',
            style: 'border: 1px solid #3892D3;',
            width: 200,
            header: {
                title: 'Selected Dates',
                titlePosition: 0,
                items: [
                    {
                        xtype: 'button',
                        itemId: 'resetBtn',
                        ui: 'plain',
                        width: 30,
                        height: 25,
                        iconCls: 'fa-icon-remove',
                        listeners: {
                            click: 'onResetBtnClick'
                        }
                    }
                ]
            },
            title: 'Selected Dates'
        },
        {
            xtype: 'container',
            region: 'center',
            reference: 'centerCont',
            itemId: 'centerCont'
        }
    ],

    initComponent: function() {
        var me = this, store, records, priorMatrixDts, numCols=2, i, legendData, legendHtml='', calendarMatrixLegend;

        me.callParent(arguments);

        westCont = me.down('#westCont');

        store = Ext.create('CalendarMatrix.store.OptionsExpireStore', {});
        records = store.getRange();
        priorMatrixDts = [];
        for (i=0; i<records.length; i++){
            priorMatrixDts.push(records[i].data);
        }

        var cal = Ext.create('Ext.ux.CalendarMatrix.CalendarMatrix', {
            startMonthIdx: 0,
            numRows: 3,
            numCols: numCols,
            matrixDisabled: false,
            matrixMode: 'MULTI',
            maxWidth: 456,
            width: 456,
            height: 720,
            minHeight: 720,
            region: 'west',
            layout: 'auto',
            priorMatrixDts: priorMatrixDts,
            cls: 'matrix-cal',
            itemId: 'matrixEx2Cal'
        });

        westCont.add(cal);

        legendData = [
            {cls: 'holiday', legend: 'Holiday'},
            {cls: 'stopTrading', legend: 'Stop Trading'},
            {cls: 'optionsExpire', legend: 'Options Expire'},
            {cls: 'quarterlyExpiration', legend: 'Quarterly Expiration'}
        ];

        i=0;
        while (i<legendData.length)
        {
            legendHtml = legendHtml + '<div class="legend-span">';
            for (j=0; j<numCols; j++){
                legendHtml = legendHtml +
                    '<div class="legend-cls '+ (Ext.isEmpty(legendData[i].cls) ? '' : legendData[i].cls) + '"></div>' +
                    '<div class = "legend-legend">' + legendData[i].legend + '</div>';
                i++;
                if (i>=legendData.length){break;}
            }
            legendHtml = legendHtml + '</div>';
        }

        calendarMatrixLegend = me.down('#calendarMatrixLegend');
        calendarMatrixLegend.update(legendHtml);
    }

});