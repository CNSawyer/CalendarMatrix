/*
 * File: app/view/MatrixEx3.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CalendarMatrix.view.MatrixEx3', {
    extend: 'Ext.container.Container',
    alias: 'widget.matrixex3',

    requires: [
        'CalendarMatrix.view.MatrixEx3ViewModel',
        'CalendarMatrix.view.MatrixEx3ViewController',
        'Ext.container.Container',
        'Ext.form.field.ComboBox'
    ],

    controller: 'matrixex3',
    viewModel: {
        type: 'matrixex3'
    },
    cls: 'matrix-ex3-cal',
    itemId: 'matrixEx3',
    margin: 5,
    scrollable: true,
    style: 'background-color: white;',
    layout: 'border',

    items: [
        {
            xtype: 'container',
            region: 'north',
            html: '3x1 Matrix sized for Neptune-Touch and Crisp-Touch Themes. Also demonstrates the following:<br> - Demonstrates International Language support<br> - Single Date selection popup with day counts from today (financial applications).  Utilizes overrideCellHtmlFn config to inject custom HTML into each cell<br> - Utilizes renderTplOverride config to display day of week names with 3 characters.<br> - Dates prior to today disabled utilizing disableFn config<br> - Weekend days custom styled utilizing customClsFn config<br>',
            style: 'margin: 20px 0; font-size: 18px;'
        },
        {
            xtype: 'combobox',
            region: 'north',
            reference: 'languageSelect',
            itemId: 'languageSelect',
            maxWidth: 300,
            fieldLabel: 'Select Language',
            labelWidth: 110,
            value: 'en',
            displayField: 'language',
            store: 'LanguageStore',
            valueField: 'code',
            listeners: {
                change: 'onLanguageSelectChange'
            }
        },
        {
            xtype: 'container',
            region: 'north',
            maxWidth: 150,
            minHeight: 60,
            style: 'margin-bottom: 10px;',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    height: 20,
                    html: 'MATURITY DATE',
                    style: 'padding-top: .2em; font-size: 1em; color: #3892D3; font-weight: bold;'
                },
                {
                    xtype: 'container',
                    listeners: {
                        render: function(panel) {
                       panel.el.on('click', function(e) {
                         var view=this.component.up('#matrixEx3');
                         var cntr = view.getController();
                         cntr.openCalendar(this.component);
                       });
                     }
                    },
                    flex: 1,
                    reference: 'selectBtn',
                    cls: 'button',
                    itemId: 'selectBtn',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'container',
                            reference: 'dayname_month',
                            cls: 'button-dayname-month',
                            itemId: 'dayname_month',
                            width: 40,
                            layout: 'fit'
                        },
                        {
                            xtype: 'container',
                            flex: 1,
                            reference: 'day',
                            cls: 'button-select',
                            html: 'SELECT',
                            itemId: 'day',
                            layout: 'fit'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'container',
            region: 'center'
        }
    ],

    initComponent: function() {
        var me = this;

        me.callParent(arguments);

        return;

        var renderTplOverride = [  // Overriding default renderTpl (refer to Ext.picker.Date) to include 3-chars in weekday names... see firstInitial() template method
            '<div id="{id}-innerEl" data-ref="innerEl">',
            '<div class="{baseCls}-header">',
            '<div id="{id}-prevEl" data-ref="prevEl" class="{baseCls}-prev {baseCls}-arrow" role="button" title="{prevText}"></div>',
            '<div id="{id}-middleBtnEl" data-ref="middleBtnEl" class="{baseCls}-month" role="heading">{%this.renderMonthBtn(values, out)%}</div>',
            '<div id="{id}-nextEl" data-ref="nextEl" class="{baseCls}-next {baseCls}-arrow" role="button" title="{nextText}"></div>',
            '</div>',
            '<table role="grid" id="{id}-eventEl" data-ref="eventEl" class="{baseCls}-inner" {%',
            // If the DatePicker is focusable, make its eventEl tabbable.
            // Note that we're looking at the `focusable` property because
            // calling `isFocusable()` will always return false at that point
            // as the picker is not yet rendered.
            'if (values.$comp.focusable) {out.push("tabindex=\\\"0\\\"");}',
            '%} cellspacing="0">',
            '<thead><tr role="row">',
            '<tpl for="dayNames">',
            '<th role="columnheader" class="{parent.baseCls}-column-header" aria-label="{.}">',
            '<div role="presentation" class="{parent.baseCls}-column-header-inner">{.:this.firstInitial}</div>',
            '</th>',
            '</tpl>',
            '</tr></thead>',
            '<tbody><tr role="row">',
            '<tpl for="days">',
            '{#:this.isEndOfWeek}',
            '<td role="gridcell">',
            '<div hidefocus="on" class="{parent.baseCls}-date"></div>',
            '</td>',
            '</tpl>',
            '</tr></tbody>',
            '</table>',
            '<tpl if="showToday">',
            '<div id="{id}-footerEl" data-ref="footerEl" role="presentation" class="{baseCls}-footer">{%this.renderTodayBtn(values, out)%}</div>',
            '</tpl>',
            '</div>',
            {
                firstInitial: function(value) {
                    return value.substr(0, 3).toUpperCase();  // Overridden for this example
                },
                isEndOfWeek: function(value) {
                    // convert from 1 based index to 0 based
                    // by decrementing value once.
                    value--;
                    var end = value % 7 === 0 && value !== 0;
                    return end ? '</tr><tr role="row">' : '';
                },
                renderTodayBtn: function(values, out) {
                    Ext.DomHelper.generateMarkup(values.$comp.todayBtn.getRenderTree(), out);
                },
                renderMonthBtn: function(values, out) {
                    Ext.DomHelper.generateMarkup(values.$comp.monthBtn.getRenderTree(), out);
                }
            }
        ];


        var cal = Ext.create('Ext.ux.CalendarMatrix.CalendarMatrix', {
            numRows: 1,
            numCols: 2,
            matrixDisabled: false,
            matrixMode: 'SINGLE',
            cls: 'matrix-cal',
            itemId: 'matrixEx3Cal',
            includeMonthPicker: true,
            renderTplOverride: renderTplOverride,
            overrideCellHtmlFn: function(cls, dayNum, cellDate){
                // Add # days from today to each cell (Financial Day Count calendar)
                var myHtml=dayNum;
                if (cls === this.activeCls){
                    var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
                    var diff = Ext.Date.diff(today, cellDate, Ext.Date.DAY);
                    var diffStr = (diff>0 ? diff.toString() : '&nbsp;');
                    myHtml = myHtml+'<div class="daycount-inner">'+diffStr+'</div>';
                }
                return myHtml;
            },
            disableFn: function(cellDate){  // Disable all days prior to today from selection
                var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
                return (cellDate < today);
            },
            customClsFn: function(cellDate){ // Speical styling for weekend days
               var customCls = '';
               if ([0,6].indexOf(parseInt(Ext.Date.format(cellDate, 'w'))) !== -1) {
                   customCls = 'weekend';
               }
               return customCls;
            }
        });

        me.add(cal);

    }

});