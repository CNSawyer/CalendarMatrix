/*
 * File: app/view/MatrixEx5ViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CalendarMatrix.view.MatrixEx5ViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.matrixex5',

    handleSelect: function(calendarMatrix, selDt, selDate, selVal) {
        var me=this,
            rangeDt1 = calendarMatrix.rangeDt1,
            rangeDt2 = calendarMatrix.rangeDt2,
            rangeSelectMode = calendarMatrix.getRangeSelectMode();

        if (rangeSelectMode==='startdate'){
            me.updCheckInDate(selDate);
            if (Ext.isEmpty(rangeDt2)){ // default enddate to next day
                calendarMatrix.rangeDate2 = Ext.Date.add(selDate, Ext.Date.DAY, 1);
                calendarMatrix.rangeDt2 = Ext.Date.format(calendarMatrix.rangeDate2, "Y-m-d");
            }
            // auto-select end date button and redisplay calendar to accept end date
            me.checkOutBtnClick(me.lookupReference('checkOutBtn2'));
        }
        else if (rangeSelectMode==='enddate'){
            me.updCheckOutDate(selDate);
            if (Ext.isEmpty(rangeDt1)){ // default startdate to prior day
                calendarMatrix.rangeDate1 = Ext.Date.add(selDate, Ext.Date.DAY, -1);
                calendarMatrix.rangeDt1 = Ext.Date.format(calendarMatrix.rangeDate1, "Y-m-d");
            }
            // auto-select start date button and redisplay calendar to accept start date
            me.checkInBtnClick(me.lookupReference('checkInBtn2'));
        }
    },

    checkInBtnClick: function(myBtn) {
        var matrix = this.getView().down('#matrixEx5Cal');
        matrix.setRangeSelectMode('startdate');
        matrix.dispCalGrid();
        myBtn.addCls('selected');
        this.lookupReference('checkOutBtn2').removeCls('selected');
    },

    checkOutBtnClick: function(myBtn) {
        var matrix = this.getView().down('#matrixEx5Cal');
        matrix.setRangeSelectMode('enddate');
        matrix.dispCalGrid();
        myBtn.addCls('selected');
        this.lookupReference('checkInBtn2').removeCls('selected');
    },

    updCheckInDate: function(selDate) {
        this.lookupReference('checkInBtn2Date').update(Ext.Date.format(selDate, "l")+', '+Ext.Date.format(selDate, "m/d/y"));
    },

    updCheckOutDate: function(selDate) {
        this.lookupReference('checkOutBtn2Date').update(Ext.Date.format(selDate, "l")+', '+Ext.Date.format(selDate, "m/d/y"));
    },

    onResetBtnClick: function(button, e, eOpts) {
        var me = this,
            view = me.getView(),
            matrix = me.lookupReference('matrixEx5Cal');

        console.log('matrixEx5Cal (prior to reset): startDt='+matrix.rangeDt1+', endDt='+matrix.rangeDt2);

        matrix.rangeDate1= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);
        matrix.rangeDt1 = Ext.Date.format(matrix.rangeDate1, "Y-m-d");
        matrix.rangeDate2 = Ext.Date.add(matrix.rangeDate1, Ext.Date.DAY, 1);
        matrix.rangeDt2 = Ext.Date.format(matrix.rangeDate2, "Y-m-d");

        me.updCheckInDate(matrix.rangeDate1);
        me.updCheckOutDate(matrix.rangeDate2);

        matrix.dispCalGrid();

    }

});
