/*
 * File: app/view/MatrixEx1.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CalendarMatrix.view.MatrixEx1', {
    extend: 'Ext.container.Container',
    alias: 'widget.matrixex1',

    requires: [
        'CalendarMatrix.view.MatrixEx1ViewModel',
        'Ext.container.Container'
    ],

    viewModel: {
        type: 'matrixex1'
    },
    cls: 'matrix-ex1-cal',
    itemId: 'matrixEx1',
    scrollable: true,
    style: 'background-color: white; margin-left: 5px;',
    layout: 'border',

    items: [
        {
            xtype: 'container',
            region: 'north',
            html: 'MarketWatch style Options Expiration read-only Calendar.  3x4 Matrix with width of 678px sized for Neptume and Crisp Themes.  Initialize 6 months back. Month Picker displayed upon clicking down arrow next to Today button (can be disabled).  Sample code demonstrates how to implement flexible data-driven legend.',
            style: 'margin: 20px 0; font-size: 18px;'
        },
        {
            xtype: 'container',
            region: 'west',
            itemId: 'westCont',
            maxWidth: 678,
            minHeight: 955,
            width: 678,
            items: [
                {
                    xtype: 'container',
                    cls: 'calendar-matrix-legend',
                    height: 50,
                    itemId: 'calendarMatrixLegend'
                }
            ]
        },
        {
            xtype: 'container',
            region: 'center'
        }
    ],

    initComponent: function() {
        var me = this, westCont, store, records, priorMatrixDts, numCols=3, i, legendData, legendHtml='', calendarMatrixLegend;

        me.callParent(arguments);

        westCont = me.down('#westCont');

        store = Ext.create('CalendarMatrix.store.OptionsExpireStore', {});
        records = store.getRange();
        priorMatrixDts = [];
        for (i=0; i<records.length; i++){
            priorMatrixDts.push(records[i].data);
        }

        var cal = Ext.create('Ext.ux.CalendarMatrix.CalendarMatrix', {
            startMonthIdx: -6,
            numRows: 4,
            numCols: numCols,
            priorMatrixDts: priorMatrixDts,
            cls: 'matrix-cal',
            itemId: 'matrixEx1Cal'
        });

        westCont.add(cal);


        legendData = [
            {cls: 'holiday', legend: 'Holiday'},
            {cls: 'stopTrading', legend: 'Stop Trading'},
            {cls: 'optionsExpire', legend: 'Options Expire'},
            {cls: 'quarterlyExpiration', legend: 'Quarterly Expiration'}
        ];

        i=0;
        while (i<legendData.length)
        {
            legendHtml = legendHtml + '<div class="legend-span">';
            for (j=0; j<numCols; j++){
                legendHtml = legendHtml +
                    '<div class="legend-cls '+ (Ext.isEmpty(legendData[i].cls) ? '' : legendData[i].cls) + '"></div>' +
                    '<div class = "legend-legend">' + legendData[i].legend + '</div>';
                i++;
                if (i>=legendData.length){break;}
            }
            legendHtml = legendHtml + '</div>';
        }

        calendarMatrixLegend = me.down('#calendarMatrixLegend');
        calendarMatrixLegend.update(legendHtml);
    }

});