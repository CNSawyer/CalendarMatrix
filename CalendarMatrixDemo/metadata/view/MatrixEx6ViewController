{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "matrixex6",
        "designer|userClassName": "MatrixEx6ViewController"
    },
    "name": "MatrixEx4ViewController1",
    "designerId": "bfe8dad1-86d1-4500-bd33-83db1cb4e5b9",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "x,y, rangeSelectMode"
                ],
                "fn": "createWindow",
                "implHandler": [
                    "var me = this;",
                    "",
                    "myWindow = Ext.create('Ext.window.Window', {",
                    "    width: 487,",
                    "    maxWidth: 487,",
                    "    height: 282,",
                    "    cls: 'matrix-ex6-cal',",
                    "    style: 'padding: 4px;',",
                    "    itemId: 'calendarPopupWindow',",
                    "    header: false",
                    "});",
                    "",
                    "",
                    "me.getView().myWindow = myWindow;",
                    "",
                    "var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);",
                    "",
                    "var cal = Ext.create('Ext.ux.CalendarMatrix.CalendarMatrix', {",
                    "    numRows: 1,",
                    "    numCols: 2,",
                    "    matrixMode: 'RANGE',",
                    "    matrixDisabled: false,",
                    "    rangeSelectMode: rangeSelectMode,",
                    "    cls: 'matrix-cal',",
                    "    itemId: 'matrixEx6Cal',",
                    "    reference: 'matrixEx6Cal',",
                    "    monthTextFn: function(myDate){return Ext.Date.format(myDate, 'M').toUpperCase()+' '+Ext.Date.format(myDate, 'Y');},",
                    "    disableFn: function(cellDate, matrixCont){",
                    "        // When selecting enddates, disable dates prior to start date.  when selecting start dates, disable prior to today",
                    "        var today= Ext.Date.clearTime(new Date(Date(Ext.Date.now())), true);",
                    "        var retRangeSelectMode =  matrixCont.getRangeSelectMode();",
                    "        if (retRangeSelectMode === 'startdate' && !Ext.isEmpty(matrixCont.rangeDt2)){",
                    "            return (cellDate < today || cellDate > matrixCont.rangeDate2);",
                    "        }",
                    "        if (retRangeSelectMode === 'startdate' || Ext.isEmpty(matrixCont.rangeDt1)){",
                    "            return (cellDate < today);",
                    "        }",
                    "        return (cellDate < matrixCont.rangeDate1);",
                    "    }",
                    "",
                    "});",
                    "",
                    "cal.mon(cal, 'calendarselect', me.handleSelect, me);",
                    "cal.mon(cal, 'mouseover', me.onCalendarMouseOver, me);",
                    "",
                    "",
                    "// Proceed to remove default month navigation toolbar and add custom arrows",
                    "var toolbar = cal.down('#calGridToolBar');",
                    "cal.remove(toolbar, true);",
                    "",
                    "var priorBtn = Ext.create('Ext.button.Button',{",
                    "    ui: 'plain',",
                    "    iconCls: 'fa-icon-chevron-sign-left',",
                    "    text: '',",
                    "    style: 'z-index: 200; position: absolute;',",
                    "    x: 10,",
                    "    y: 25,",
                    "    height: 40,",
                    "    width: 40,",
                    "    hidden: true, // initialize as hidden as days prior to today are disabled",
                    "    itemId: 'priorCalGridMatrix',",
                    "    reference: 'priorCalGridMatrix',",
                    "    listeners: {",
                    "        scope: me,",
                    "        click: 'onMyPriorCalGridMatrixClick'",
                    "    }",
                    "});",
                    "",
                    "cal.add(priorBtn);",
                    "",
                    "var nextBtn = Ext.create('Ext.button.Button',{",
                    "    ui: 'plain',",
                    "    iconCls: 'fa-icon-chevron-sign-right',",
                    "    text: '',",
                    "    style: 'z-index: 200; position: absolute; ',",
                    "    x: 420,",
                    "    y: 25,",
                    "    height: 40,",
                    "    width: 40,",
                    "    itemId: 'nextCalGridMatrix',",
                    "    reference: 'nextCalGridMatrix',",
                    "    cls: 'cal-grid-next-btn',",
                    "    listeners: {",
                    "        scope: me,",
                    "        click: 'onMyNextCalGridMatrixClick'",
                    "    }",
                    "});",
                    "",
                    "cal.add(nextBtn);",
                    "",
                    "myWindow.add(cal);",
                    "",
                    "myWindow.showAt(x, y, {duration: 100});",
                    "",
                    ""
                ]
            },
            "name": "createWindow",
            "designerId": "92840c56-6d22-4a9d-9e6d-231aecfd9858"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "calendarMatrix",
                    "selDt",
                    "selDate",
                    "selVal"
                ],
                "fn": "handleSelect",
                "implHandler": [
                    "var me=this,",
                    "    rangeDt1, rangeDt2, rangeDate1_fmt, rangeDate2_fmt,",
                    "    rangeSelectMode = calendarMatrix.getRangeSelectMode(),",
                    "    myWindow = me.getView().myWindow,",
                    "    startMonthIdx =  calendarMatrix.getStartMonthIdx();",
                    "",
                    "rangeDt1 = calendarMatrix.rangeDt1;",
                    "rangeDt2 = calendarMatrix.rangeDt2;",
                    "rangeDate1_fmt = Ext.Date.format(calendarMatrix.rangeDate1, 'm/d/Y');",
                    "rangeDate2_fmt = Ext.Date.format(calendarMatrix.rangeDate2, 'm/d/Y');",
                    "",
                    "me.lookupReference('startBtn').setText(rangeDate1_fmt);",
                    "me.lookupReference('endBtn').setText(rangeDate2_fmt);",
                    "",
                    "if (rangeSelectMode==='startdate' && Ext.isEmpty(rangeDt2)){",
                    "    // auto-select end date button and redisplay calendar to accept end date",
                    "    me.onEndBtnClick(me.lookupReference('endBtn'));",
                    "  //  myWindow.down('#priorCalGridMatrix').setVisible(false);",
                    "}",
                    "if (rangeSelectMode==='enddate' && Ext.isEmpty(rangeDt1)){",
                    "    // auto-select start date button and redisplay calendar to accept start date",
                    "    me.onStartBtnClick(me.lookupReference('startBtn'));",
                    "}",
                    "if (!Ext.isEmpty(rangeDt1) && !Ext.isEmpty(rangeDt2)){",
                    "    myWindow.setHidden(true);",
                    "}"
                ]
            },
            "name": "handleSelect",
            "designerId": "ffd09c29-d99a-41f2-aac3-667b7ed55bc8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "matrix",
                    "selDate"
                ],
                "fn": "onCalendarMouseOver",
                "implHandler": [
                    "var me=this, i, matrixItem, calendarMatrix = matrix.matrixCont,",
                    "     rangeSelectMode = calendarMatrix.getRangeSelectMode(),",
                    "     selDt = Ext.Date.format(selDate, 'Y-m-d');",
                    "",
                    "",
                    "if ((rangeSelectMode==='startdate' && Ext.isEmpty(calendarMatrix.rangeDt2)) || ",
                    "    (rangeSelectMode==='enddate'   && Ext.isEmpty(calendarMatrix.rangeDt1)) || ",
                    "    (rangeSelectMode==='enddate'   && selDt === calendarMatrix.rangeDt1)  ||",
                    "    (rangeSelectMode==='startdate' && selDt === calendarMatrix.rangeDt2)",
                    "   ){",
                    "    return;",
                    "}",
                    "",
                    "if (rangeSelectMode==='enddate'){",
                    "    calendarMatrix.rangeDate2 = selDate;",
                    "    calendarMatrix.rangeDt2 = Ext.Date.format(selDate, 'Y-m-d');",
                    "} ",
                    "else {",
                    "    calendarMatrix.rangeDate1 = selDate;",
                    "    calendarMatrix.rangeDt1 = Ext.Date.format(selDate, 'Y-m-d');   ",
                    "}",
                    "",
                    "// refresh all matrix calendars based on selected range",
                    "for (i=0; i<calendarMatrix.matrix.length; i++){",
                    "    matrixItem = calendarMatrix.down('#'+calendarMatrix.matrix[i].itemId+'_mc');",
                    "    matrixItem.fullUpdate(selDate);",
                    "}"
                ]
            },
            "name": "onCalendarMouseOver",
            "designerId": "7f47c981-db55-4ea7-8e34-bf3f20ce8fab"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "onMyPriorCalGridMatrixClick",
                "implHandler": [
                    "this.handleMonthNav(-1);"
                ]
            },
            "name": "onMyPriorCalGridMatrixClick",
            "designerId": "b0689992-da4b-47c2-8199-1270dcf0de54"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "onMyNextCalGridMatrixClick",
                "implHandler": [
                    "this.handleMonthNav(1);"
                ]
            },
            "name": "onMyNextCalGridMatrixClick",
            "designerId": "d998c8d8-9d9e-4849-b707-d629e1a22f91"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "multiplier"
                ],
                "fn": "handleMonthNav",
                "implHandler": [
                    "var me = this,",
                    "    myWindow = me.getView().myWindow,",
                    "    calendarMatrix = myWindow.down('#matrixEx6Cal'),",
                    "    startMonthIdx, lastMatrixItem,",
                    "    rangeSelectMode = calendarMatrix.getRangeSelectMode();",
                    "",
                    "calendarMatrix.setStartMonthIdx(calendarMatrix.getStartMonthIdx() + (multiplier* calendarMatrix.numMonths));",
                    "calendarMatrix.dispCalGrid();",
                    "",
                    "startMonthIdx =  calendarMatrix.getStartMonthIdx();",
                    "lastMatrixItem = calendarMatrix.down('#'+calendarMatrix.matrix[calendarMatrix.matrix.length-1].itemId+'_mc');",
                    "",
                    "// Handle hide/show of next/prev month icons",
                    "myWindow.down('#priorCalGridMatrix').setVisible(true);",
                    "myWindow.down('#nextCalGridMatrix').setVisible(true);",
                    "if (startMonthIdx === 0) {",
                    "    myWindow.down('#priorCalGridMatrix').setVisible(false);",
                    "}",
                    "if (rangeSelectMode==='startdate' && !Ext.isEmpty(calendarMatrix.rangeDt2) &&",
                    "    calendarMatrix.rangeDate2 < lastMatrixItem.maxDate){",
                    "      myWindow.down('#nextCalGridMatrix').setVisible(false);",
                    "}"
                ]
            },
            "name": "handleMonthNav",
            "designerId": "da3035f1-9b9b-463f-846f-713177a2283a"
        }
    ]
}